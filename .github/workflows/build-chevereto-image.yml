name: Build Chevereto Image

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: "Chevereto package version (e.g. 4.3.5)"
        required: false
        default: "4"

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: chevereto
  IMAGE_REGISTRY: ${{ vars.CHEVERETO_IMAGE_REGISTRY || 'ghcr.io/zeroclover/chevereto' }}

jobs:
  # Prepare job to determine version and check if build is needed
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
      tags: ${{ steps.prep.outputs.tags }}
      should_build: ${{ steps.registry.outputs.should_build || 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Ensure license key secret exists
        run: |
          if [ -z "${{ secrets.CHEVERETO_LICENSE_KEY }}" ]; then
            echo "CHEVERETO_LICENSE_KEY secret is required to fetch the pro package." >&2
            exit 1
          fi

      - name: Prepare Chevereto package
        id: prep
        env:
          VERSION_INPUT: ${{ github.event.inputs.version }}
          CHEVERETO_LICENSE_KEY: ${{ secrets.CHEVERETO_LICENSE_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${VERSION_INPUT:-4}"
          if [ -z "$VERSION" ]; then
            VERSION="4"
          fi

          DOWNLOAD_DIR=".temp"
          WORKING_DIR="chevereto"
          rm -rf "$DOWNLOAD_DIR" "$WORKING_DIR"
          mkdir -p "$DOWNLOAD_DIR" "$WORKING_DIR"
          API_DOWNLOAD="https://chevereto.com/api/download/"

          echo "Downloading Chevereto package ${VERSION}"
          pushd "$DOWNLOAD_DIR" >/dev/null
          curl -fsSLJO -H "License: ${CHEVERETO_LICENSE_KEY}" "${API_DOWNLOAD}${VERSION}"
          ZIP_NAME=$(ls -1 *.zip | head -n1)
          if [ -z "$ZIP_NAME" ]; then
            echo "Download did not produce a zip file" >&2
            exit 1
          fi
          unzip -oq "$ZIP_NAME" -d "../$WORKING_DIR"
          export ZIP_NAME
          popd >/dev/null
          VERSION_FROM_ZIP=$(printf '%s\n' "$ZIP_NAME" | sed -n "s/^chevereto_\([0-9.]*\).*$/\1/p")
          VERSION_FROM_ZIP=${VERSION_FROM_ZIP#v}
          VERSION_FROM_ZIP=${VERSION_FROM_ZIP#V}
          if [ -z "$VERSION_FROM_ZIP" ]; then
            echo "Unable to determine Chevereto version from $ZIP_NAME" >&2
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<<"$VERSION_FROM_ZIP"
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          TAG_LIST="$MAJOR $MAJOR.${MINOR} $MAJOR.${MINOR}.${PATCH}"
          {
            printf 'version=%s\n' "$VERSION_FROM_ZIP"
            printf 'tags=%s\n' "$TAG_LIST"
          } >>"$GITHUB_OUTPUT"

          rm -rf "$DOWNLOAD_DIR"

      - name: Show resolved version
        run: |
          echo "Resolved package version: ${{ steps.prep.outputs.version }}"

      - name: Login to GHCR for registry check
        if: github.event_name == 'schedule'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check existing registry version
        if: github.event_name == 'schedule'
        id: registry
        env:
          IMAGE_REGISTRY: ${{ env.IMAGE_REGISTRY }}
          PACKAGE_VERSION: ${{ steps.prep.outputs.version }}
          GH_ACTOR: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REGISTRY="${IMAGE_REGISTRY:-ghcr.io/zeroclover/chevereto}"
          REGISTRY="${REGISTRY#https://}"
          REGISTRY="${REGISTRY#http://}"
          HOST="${REGISTRY%%/*}"
          IMAGE_PATH="${REGISTRY#${HOST}/}"
          if [ -z "$IMAGE_PATH" ] || [ "$IMAGE_PATH" = "$REGISTRY" ]; then
            echo "IMAGE_REGISTRY must include an image path (e.g. ghcr.io/owner/chevereto)." >&2
            exit 1
          fi
          echo "Inspecting ${HOST}/${IMAGE_PATH}"
          RESP=$(curl -fsSL -u "${GH_ACTOR}:${GH_TOKEN}" "https://${HOST}/v2/${IMAGE_PATH}/tags/list" || true)
          export RESP_JSON="$RESP"
          if ! command -v jq >/dev/null 2>&1; then
            echo "jq is required to parse registry tags" >&2
            exit 1
          fi

          LATEST_TAG=""
          if [ -n "$RESP_JSON" ]; then
            LATEST_TAG=$(printf '%s' "$RESP_JSON" |
              jq -r '[.tags[]? | select(test("^\\d+\\.\\d+\\.\\d+$"))] | sort_by(split(".") | map(tonumber)) | last // empty' 2>/dev/null || true)
          fi

          SHOULD_BUILD=true
          if [ -n "$PACKAGE_VERSION" ] && [ "$LATEST_TAG" = "$PACKAGE_VERSION" ]; then
            SHOULD_BUILD=false
          fi

          {
            printf 'latest_tag=%s\n' "$LATEST_TAG"
            if [ "$SHOULD_BUILD" = true ]; then
              printf 'should_build=true\n'
            else
              printf 'should_build=false\n'
            fi
          } >>"$GITHUB_OUTPUT"

          if [ -n "$LATEST_TAG" ]; then
            echo "Latest registry patch tag: $LATEST_TAG"
          else
            echo "No existing patch tags found in registry."
          fi
          if [ "$SHOULD_BUILD" != true ]; then
            echo "Registry already has the current package version; skipping build."
          fi

      - name: Skip build (already up-to-date)
        if: github.event_name == 'schedule' && steps.registry.outputs.should_build == 'false'
        run: echo "Chevereto image already up to date on registry."

  # Multi-architecture build job
  build:
    needs: prepare
    if: github.event_name != 'schedule' || needs.prepare.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Prepare Chevereto package
        id: prep
        env:
          VERSION_INPUT: ${{ github.event.inputs.version }}
          CHEVERETO_LICENSE_KEY: ${{ secrets.CHEVERETO_LICENSE_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${VERSION_INPUT:-4}"
          if [ -z "$VERSION" ]; then
            VERSION="4"
          fi

          DOWNLOAD_DIR=".temp"
          WORKING_DIR="chevereto"
          rm -rf "$DOWNLOAD_DIR" "$WORKING_DIR"
          mkdir -p "$DOWNLOAD_DIR" "$WORKING_DIR"
          API_DOWNLOAD="https://chevereto.com/api/download/"

          echo "Downloading Chevereto package ${VERSION}"
          pushd "$DOWNLOAD_DIR" >/dev/null
          curl -fsSLJO -H "License: ${CHEVERETO_LICENSE_KEY}" "${API_DOWNLOAD}${VERSION}"
          ZIP_NAME=$(ls -1 *.zip | head -n1)
          if [ -z "$ZIP_NAME" ]; then
            echo "Download did not produce a zip file" >&2
            exit 1
          fi
          unzip -oq "$ZIP_NAME" -d "../$WORKING_DIR"
          export ZIP_NAME
          popd >/dev/null
          rm -rf "$DOWNLOAD_DIR"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REGISTRY }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.version }}
          flavor: |
            latest=false

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: |
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          outputs: type=image,name=${{ env.IMAGE_REGISTRY }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "${{ env.IMAGE_REGISTRY }}@${digest}" > "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Merge job to create multi-arch manifest
  merge:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    if: github.event_name != 'schedule' || needs.prepare.outputs.should_build == 'true'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        env:
          TAGS: ${{ needs.prepare.outputs.tags }}
          IMAGE_REGISTRY: ${{ env.IMAGE_REGISTRY }}
          PACKAGE_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          set -euo pipefail
          REGISTRY="${IMAGE_REGISTRY:-ghcr.io/zeroclover/chevereto}"
          REGISTRY="${REGISTRY#https://}"
          REGISTRY="${REGISTRY#http://}"
          if [[ "$REGISTRY" != */* ]]; then
            echo "IMAGE_REGISTRY must include an image path (e.g. ghcr.io/owner/chevereto)." >&2
            exit 1
          fi
          IMAGE_REPO="${REGISTRY,,}"

          read -ra TAG_LIST <<<"${TAGS}"
          docker buildx imagetools create \
            $(printf -- "--tag %s:%s " "${IMAGE_REPO}" "${TAG_LIST[@]}") \
            $(cat * | tr '\n' ' ')

      - name: Inspect image
        env:
          IMAGE_REGISTRY: ${{ env.IMAGE_REGISTRY }}
          PACKAGE_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          REGISTRY="${IMAGE_REGISTRY:-ghcr.io/zeroclover/chevereto}"
          REGISTRY="${REGISTRY#https://}"
          REGISTRY="${REGISTRY#http://}"
          IMAGE_REPO="${REGISTRY,,}"
          docker buildx imagetools inspect "${IMAGE_REPO}:${PACKAGE_VERSION}"
